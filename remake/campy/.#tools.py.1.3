class Tool(object):
    index_counter = 0

    def __init__(self):
        self.index_counter += 1
        self.index = self.index_counter

    def comment(self, cam):
        pass


class StraightRouterBit(Tool):
    def __init__(self, diameter, rough_speed=None, plunge_speed=None):
        super(StraightRouterBit, self).__init__()

        self.zstep_pass_rough = diameter/2
        self.zstep_pass_finish = diameter/2
        self.zstep_depth_finish = 0.05
        self.diameter = diameter
        self.cutting_length = 5 # FIXME

        self.drill_speed = drill_speed or 20  # rename!
        self.rough_speed = rough_speed or 60 # FIXME make this a config param
        self.rough_rotate_speed = 10
        self.fine_rotate_speed = 5
        self.finish_speed = 50

    def comment(self, cam):
        print cam.comment
        cam.comment("FlatMill %f %f" % (self.cutting_length, self.diameter/2.0))


class BallRouterBit(StraightRouterBit):
    def comment(self, cam):
        cam.comment("BallMill %f %f" % (self.cutting_length, self.diameter/2.0))


class DovetailRouterBit(Tool):
    def __init__(self, minor_diameter=None, major_diameter=None, height=None):
        super(DovetailRouterBit, self).__init__()

        self.major_diameter = major_diameter
        self.minor_diameter = minor_diameter
        self.height = height

        self.zstep_pass_rough = major_diameter/2
        self.zstep_pass_finish = major_diameter/2
        self.zstep_depth_finish = 0.05
        self.cutting_length=1

        self.drill_speed = 20  # rename!
        self.rough_speed = 100
        self.rough_rotate_speed = 10
        self.fine_rotate_speed = 5
        self.finish_speed = 30


class VRouterBit(Tool):
    def __init__(self, included_angle, diameter=None, drill_speed=None, rough_speed=None):
        super(VRouterBit, self).__init__()

        self.included_angle=included_angle
        self.diameter = diameter
        self.cutting_length = 1

        self.drill_speed = drill_speed or 20  # rename!
        self.rough_speed = rough_speed or 60 # FIXME make this a config param
        self.rough_rotate_speed = 10
        self.fine_rotate_speed = 5
        self.finish_speed = 30

    def comment(self, cam):
        cam.comment("VMill %f %f %f" % (self.cutting_length, self.diameter/2.0, self.included_angle))


class Laser(Tool):
    def __init__(self, ):
        super(Laser, self).__init__()

        self.diameter = .01

        self.zstep_pass_rough = 0.25
        self.zstep_pass_finish = 0.25
        self.zstep_depth_finish = 0.05
        self.cutting_length=1

        self.drill_speed = 100  # rename!
        self.rough_speed = 100
        self.rough_rotate_speed = 100
        self.fine_rotate_speed = 100
        self.finish_speed = 100


class HoleSize(object):

    ##        # these are not really screws, but they are push in threaded rivets I like
    #        "Rivet-M5":     [0,     "",     0,    "",  .268,    "H",     0,    ""     ],  # H might be too small...
    #        "Rivet-1/4-20": [0,     "",     0,    "",  .350,     "",     0,    ""     ],

    nuts = {
        'rivnut-M5': {
            'minor_dia': .268,
            'minor_length': 0.51,
            'major_dia': .396,
            'major_length': .05
        },
        'rivnut-1/4-20': {
            'minor_dia': .350,
            'minor_length': .538,
            'major_dia': .490,
            'major_length': .05,
        },
    }

    pvc = {
        '1/2':   0.840,
        '3/4':   1.040,
        '1':     1.315,
        '1-1/4': 1.660,
        '1-1/2': 1.900,
        '2':     2.375,
    }

    # all measurements in mm
    # list is
    # http://www.littlemachineshop.com/reference/tapdrillsizes.pdf
    screws = {
        # inch thread
        "1/4-20": [.1887, "7", .2010, "7/32", .2188, "F", .2570, "H", .2660],
        "1/4-28": [.2062, "3", .2130, "1", .2280, "F", .2570, "H", .2660],
        "1/4-32": [.2117, "7/32", .2188, "1", .2280, "F", .2570, "H", .2660],

        # metric thread
        "M1.5-.35": [1.15, "56", 1.25, "55", 1.60, "1/16", 1.65, "52"],
        "M1.6-.35": [1.25, "55", 1.35, "54", 1.70, "51", 1.75, "50"],
        "M1.8-.35": [1.45, "53", 1.55, "1/16", 1.90, "49", 2.00, "5/64"],
        "M2-.45": [1.55, "1/16", 1.70, "51", 2.210, "45", 2.20, "44"],
        "M2-.40": [1.60, "52", 1.75, "50", 2.10, "45", 2.20, "44"],
        "M2.2-.45": [1.75, "50", 1.90, "48", 2.30, "3/32", 2.40, "41"],
        "M2.5-.45": [2.05, "46", 2.20, "44", 2.65, "37", 2.75, "7/64"],
        "M3-.60": [2.40, "41", 2.60, "37", 3.15, "1/8", 3.30, "30"],
        "M3-.50": [2.50, "39", 2.70, "36", 3.15, "1/8", 3.30, "30"],
        "M3.5-.60": [2.90, "32", 3.10, "31", 3.70, "27", 3.85, "24"],
        "M4-.75": [3.25, "30", 3.50, "28", 4.20, "19", 4.40, "17"],
        "M4-.70": [3.30, "30", 3.50, "28", 4.20, "19", 4.40, "17"],
        "M4.5-.75": [3.75, "25", 4.00, "22", 4.75, "13", 5.00, "9"],
        "M5-1.00": [4.00, "21", 4.40, "11/64", 5.25, "5", 5.50, "7/32"],
        "M5-.90": [4.10, "20", 4.40, "17", 5.25, "5", 5.50, "7/32"],
        "M5-.80": [4.20, "19", 4.50, "16", 5.25, "5", 5.50, "7/32"],
        "M5.5-.90": [4.60, "14", 4.90, "10", 5.80, "1", 6.10, "B"],
        "M6-1.00": [5.00, "8", 5.40, "4", 6.30, "E", 6.60, "G"],
        "M6-0.75": [5.25, "4", 5.50, "7/32", 6.30, "E", 6.60, "G"],
    }

    @classmethod
    # type is thread or clearance
    # subtype for thread is 75 or 50
    # subtype for clearance is close or standard
    def screw(self, screw, type, subtype, bit_name=False):
        index = 0 if type == "thread" else 4
        if subtype == "50" or subtype == "standard":
            index += 2

        if bit_name:
            index += 1

        return self.screws[screw][index]


# FIXME load from file shared with fusion etc
toollib = {}
toollib['1/8in spiral upcut'] = StraightRouterBit(diameter=1/8.)
toollib['1/16in spiral upcut'] = StraightRouterBit(diameter=1/16., rough_speed=20, plunge_speed=10)
toollib['1/4in spiral upcut'] = StraightRouterBit(diameter=1/4.)
toollib['3/8in spiral upcut'] = StraightRouterBit(diameter=3/8.)
toollib['1/2in spiral upcut'] = StraightRouterBit(diameter=1/2.)

toollib['1/2in 4-flute endmill'] = StraightRouterBit(diameter=1/2.)
toollib['1/4in 4-flute endmill'] = StraightRouterBit(diameter=1/4.)
toollib['1/8in 4-flute endmill'] = StraightRouterBit(diameter=1/8.)

toollib['1/8in spiral ball'] = BallRouterBit(diameter=1/8.)
toollib['1/4in spiral ball'] = BallRouterBit(diameter=1/4.)
toollib['3/8in spiral upcut'] = StraightRouterBit(diameter=3/8.)
toollib['1/2in spiral ball'] = BallRouterBit(diameter=1/2.)

toollib['1 1/2in straight bit'] = StraightRouterBit(diameter=1.5)
toollib['1/2in dovetail'] = DovetailRouterBit(minor_diameter=5/8., major_diameter=1/2., height=7/8.)
toollib['30degV'] = VRouterBit(included_angle=30.0, diameter=1/4., plunge_speed=20, rough_speed=30)
toollib['laser'] = Laser()

holes = HoleSize()